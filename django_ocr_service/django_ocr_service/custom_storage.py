"""
Custom storage to allow saving file to local and uploading to cloud as async task
"""

import logging
import os

from django.conf import settings
from django.core.files.storage import FileSystemStorage
from storages.backends.s3boto3 import S3Boto3Storage

logger = logging.getLogger(__name__)


class CloudMediaStorage(S3Boto3Storage):
    bucket_name = settings.AWS_STORAGE_BUCKET_NAME
    location = "media"
    file_overwrite = False


class CloudStaticStorage(S3Boto3Storage):
    bucket_name = settings.AWS_STORAGE_BUCKET_NAME
    location = "static"
    file_overwrite = True


class CloudMediaHybridStorage(CloudMediaStorage):
    """
    Hybrid Storage to use both local and cloud storage
    """

    local_file_storage = FileSystemStorage(location=settings.LOCAL_FILES_SAVE_DIR)
    local_filepath = None

    def _save_to_local(self, name, content):
        """

        :param name:
        :param content:
        :return:
        """
        filepath = self.local_file_storage._save(name, content)
        logger.info(f"{filepath} stored to local filesystem")
        # Django file storage prepends location to the filepath so mirroring that code
        full_path = self.local_file_storage.path(filepath)
        return filepath, full_path

    def _save(self, name, content):
        """

        :param name:
        :param content:
        :return:
        """

        local_filepath, local_full_path = self._save_to_local(name, content)
        cleaned_name = super(CloudMediaStorage, self)._clean_name(name)
        # This is full path that is generated by cloud storage by prepending the media root to it
        normalised_name = super(CloudMediaStorage, self)._normalize_name(cleaned_name)

        if settings.USE_ASYNC_FOR_SPEED:
            logging.info(
                f"Adding async task to upload input file {local_full_path} to cloud storage {normalised_name}"
            )
            from django_q.tasks import async_task

            async_task(
                func="ocr.storage_utils.upload_to_cloud_storage",
                group="UploadInputFile",
                path=local_full_path,
                key=normalised_name,
                append_datetime=False,
            )
        else:
            logging.info("Uploading input file to cloud storage in a blocking thread")
            filepath = super(CloudMediaHybridStorage, self)._save(name, content)
            logging.info(
                f"Input file upload complete in blocking thread. Cloud URL - {filepath}"
            )

        self.local_filepath = local_full_path
        return cleaned_name
